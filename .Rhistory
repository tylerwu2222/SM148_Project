print(i)
print(A)
}
}
}
return(A)
}
A <- c(2, 3, 1)
sort(A)
A <- c(2, 1, 3)
sort(A)
sort <- function(A){
for (i in 1:3){
if (i == 3){
break
}
for (j in 1:(3 - i)){
if (A[j] < A[j + 1]) {
temp1 <- A[j]
temp2 <- A[j + 1]
A[j] <- temp2
A[j + 1] <- temp1
print(i)
print(j)
print(A)
}
}
}
return(A)
}
A <- c(2, 1, 3)
sort(A)
sort <- function(A){
for (i in 1:3){
if (i == 3){
break
}
for (j in 1:(3 - i)){
if (A[j] > A[j + 1]) {
temp1 <- A[j]
temp2 <- A[j + 1]
A[j] <- temp2
A[j + 1] <- temp1
print(i)
print(j)
print(A)
}
}
}
return(A)
}
A <- c(2, 1, 3)
sort(A)
sort <- function(A){
for (i in 1:5){
if (i == 5){
break
}
for (j in 1:(5 - i)){
if (A[j] > A[j + 1]) {
temp1 <- A[j]
temp2 <- A[j + 1]
A[j] <- temp2
A[j + 1] <- temp1
print(i)
print(j)
print(A)
}
}
}
return(A)
}
A <- c(4, 3, 2, 5, 1)
sort(A)
sort <- function(A){
for (i in 1:6){
if (i == 6){
break
}
for (j in 1:(6 - i)){
if (A[j] > A[j + 1]) {
temp1 <- A[j]
temp2 <- A[j + 1]
A[j] <- temp2
A[j + 1] <- temp1
print(i)
print(j)
print(A)
}
}
}
return(A)
}
A <- c(4, 3, 2, 16, 5, 1)
sort(A)
sort <- function(A){
for (i in 1:6){
if (i == 6){
break
}
for (j in 1:(6 - i)){
if (A[j] > A[j + 1]) {
temp1 <- A[j]
temp2 <- A[j + 1]
A[j] <- temp2
A[j + 1] <- temp1
print(i)
print(A)
}
}
}
return(A)
}
A <- c(4, 3, 2, 16, 5, 1)
sort(A)
sort <- function(A){
for (i in 1:5){
if (i == 5){
break
}
for (j in 1:(5 - i)){
if (A[j] > A[j + 1]) {
temp1 <- A[j]
temp2 <- A[j + 1]
A[j] <- temp2
A[j + 1] <- temp1
print(i)
print(A)
}
}
}
return(A)
}
A <- c(3, 5, 4, 1, 2)
sort(A)
A <- cbind(c(1, 0, 1), c(0, 0, 1), c(0, 0, 1))
A
A <- cbind(c(1, 0, 1), c(0, 1, 1), c(0, 0, 1))
A
A <- cbind(c(1, 1, 1), c(0, 0, 1), c(0, 0, 1))
A
A <- cbind(c(1, 1, 1), c(1, 0, 1), c(0, 0, 1))
A
findrow(A)
findrow <- function(A){
j <- 1
for (i in 1:n){
while (j <= n & A[i, j] == 1){
j <- j + 1
ans <- i
}
}
return(ans)
}
A <- cbind(c(1, 1, 1), c(1, 0, 1), c(0, 0, 1))
findrow(A)
findrow <- function(A){
j <- 1
for (i in 1:3){
while (j <= n & A[i, j] == 1){
j <- j + 1
ans <- i
}
}
return(ans)
}
A <- cbind(c(1, 1, 1), c(1, 0, 1), c(0, 0, 1))
findrow(A)
findrow <- function(A){
j <- 1
n <- nrow(A)
for (i in 1:n){
while (j <= n & A[i, j] == 1){
j <- j + 1
ans <- i
}
}
return(ans)
}
A <- cbind(c(1, 1, 1), c(1, 0, 1), c(0, 0, 1))
findrow(A)
findrow <- function(A){
j <- 1
n <- nrow(A)
for (i in 1:n){
while (j <= n & A[i, j] == 1){
j <- j + 1
ans <- i
if (j == 3){
break
}
}
}
return(ans)
}
A <- cbind(c(1, 1, 1), c(1, 0, 1), c(0, 0, 1))
findrow(A)
1:3
findrow <- function(A){
j <- 1
n <- nrow(A)
for (i in 1:n){
while (j <= n && A[i, j] == 1){
j <- j + 1
ans <- i
}
}
return(ans)
}
A <- cbind(c(1, 1, 1), c(1, 0, 1), c(0, 0, 1))
findrow(A)
A <- cbind(c(1, 1, 1), c(1, 0, 1), c(1, 0, 0))
findrow(A)
A <- c(c(3, 6), c(5, 10), c(1, 4), c(6, 10), c(7, 12), c(10, 12))
A
A <- c(3, 6)
B <- c(5, 10)
C <- c(1, 4)
D <- c(6, 10)
E <- c(7, 12)
G <- c(10, 12)
lister <- c(A[1], B[1], C[1], D[1], E[1], G[1])
start <- c(A[1], B[1], C[1], D[1], E[1], G[1])
end <- c(A[2], B[2], C[2], D[2], E[2], G[2])
start
end
sort(start)
order(start)
ind <- order(start)
start <- start[ind]
end <- end[ind]
start
end
Sortt <- function(A){
return(stoogesort(A, 1, length(A)))
}
stoogesort <- function(A, i, j){
if ((j - i) == 1 && A[i] > A[j]){
Swapp(A, i, j)
}
else if ((j - i) > 1){
m <- ceiling((2 * (j - 1)) / 3) - 1
stoogesort(A, i, i + m)
stoogesort(A, j - m, j)
stoogesort(A, i, i + m)
}
}
Swapp <- function(A, i, j){
temp <- A[i]
A[i] <- A[j]
A[j] <- temp
}
A <- c(1, 2, 3, 5, 6, 9, 4, 7)
stoogesort(A)
stoogesort(A, 1, 8)
stoogesort(A, 4, 8)
Sortt <- function(A){
return(stoogesort(A, 1, length(A)))
}
stoogesort <- function(A, i, j){
if ((j - i) == 1 && A[i] > A[j]){
Swapp(A, i, j)
}
else if ((j - i) > 1){
m <- ceiling((2 * (j - 1)) / 3) - 1
stoogesort(A, i, i + m)
stoogesort(A, j - m, j)
stoogesort(A, i, i + m)
}
return(A)
}
Swapp <- function(A, i, j){
temp <- A[i]
A[i] <- A[j]
A[j] <- temp
}
A <- c(1, 2, 3, 5, 6, 9, 4, 7)
stoogesort(A)
stoogesort(A, 3, 7)
sort(A)
A <- c(8, 7, 6, 5, 4, 3, 2)
sort(A)
A <- c(8, 7, 6, 5, 4, 3, 2, 10)
sort(A)
A <- c(8, 7, 6, 5, 4, 3, 2, 10, 3, 13)
sort(A)
Find_K <- function(L, start, end){
mid <- floor((start + end) / 2)
if (mid == start || mid == end){
return(mid)
}
mid_point <- L[mid]
left_point <- L[mid - 1]
right_point <- L[mid + 1]
if (mid_point < left_point && mid_point < right_point){
return(mid)
} else if (mid_point > left_point){
return(Find_K(L, start, mid - 1))
} else {
return(Find_K(L, mid + 1, end))
}
}
L <- c(10, 8, 6, 5, 7, 8, 9)
Find_K(L, 1, 7)
L <- c(10, 8, 6, 7, 8, 9)
Find_K(L, 1, 6)
L <- c(1, 8, 9, 10)
Find_K(L, 1 ,4)
4 * 3 * 6
72 + 64
df <- read.csv("merged_test_data_with_sentiment.csv")
getwd()
setwd('Downloads/M148')
dir()
setwd('SM148_project')
dir()
df <- read.csv("merged_test_data_with_sentiment.csv")
table(df$Face_Masks_Required_in_Public)
m1 <- lm(df$Face_Masks_Required_in_Public, df$Polarity)
df$Face_Masks_Required_in_Public <- as.factor(df$Face_Masks_Required_in_Public)
m1 <- lm(df$Face_Masks_Required_in_Public, df$Polarity)
m1 <- lm(df$Face_Masks_Required_in_Public~df$Polarity)
summary(m1)
df <- read.csv("merged_test_data_with_sentiment.csv")
m1 <- lm(df$Face_Masks_Required_in_Public~df$Polarity)
install.packages("e1071")
install.packages("caTools")
install.packages("caret")
df <- read.csv("merged_test_data_with_sentiment.csv")
# Install libraries
library(e1071)
library(caTools)
library(caret)
df <- na.omit(df)
split <- sample.split(df, SplitRatio = 0.7)
train_cl <- subset(df, split == "TRUE")
test_cl <- subset(df, split == "FALSE")
train_cl$Face_Masks_Required_in_Public
classifier_cl <- naiveBayes(Face_Masks_Required_in_Public~Polarity, data = train_cl)
y_pred <- predict(classifier_cl, newdata = test_cl)
# Confusion Matrix
cm <- table(test_cl$Species, y_pred)
# Confusion Matrix
cm <- table(test_cl$Face_Masks_Required_in_Public, y_pred)
cm
# Model Evaluation
confusionMatrix(cm)
df <- read.csv("merged_test_data_with_sentiment.csv")
df <- na.omit(df)
split <- sample.split(df, SplitRatio = 0.7)
train_cl <- subset(df, split == "TRUE")
test_cl <- subset(df, split == "FALSE")
test_cl$Face_Masks_Required_in_Public
table(test_cl$Face_Masks_Required_in_Public)
df <- read.csv("merged_test_data_with_sentiment.csv")
split <- sample.split(df, SplitRatio = 0.7)
train_cl <- subset(df, split == "TRUE")
test_cl <- subset(df, split == "FALSE")
set.seed(120)  # Setting Seed
classifier_cl <- naiveBayes(Face_Masks_Required_in_Public~Polarity, data = train_cl)
y_pred <- predict(classifier_cl, newdata = test_cl)
# Confusion Matrix
cm <- table(test_cl$Face_Masks_Required_in_Public, y_pred)
cm
table(test_cl$Face_Masks_Required_in_Public)
# Confusion Matrix
cm <- table(y_pred)
cm
y_pred
# try with polarity as numerical
df <- na.omit(df)
m1 <- lm(Face_Masks_Required_in_Public~Polarity, data = df)
dir()
getwd()
df <- read.csv("all_tweets_with_sentiment.csv")
# try with polarity as numerical
length(df)
# try with polarity as numerical
dim(df)
df <- read.csv("merged_test_data_with_sentiment.csv")
dim(df)
m1 <- lm(factor(df$Face_Masks_Required_in_Public) ~ df$Polarity)
m1
graph(m1)
plot(m1)
cor(factor(df$Face_Masks_Required_in_Public), df$Polarity)
table(df$Face_Masks_Required_in_Public)
new_mask <- as.numeric(0)
for (i in 1:nrow(df)){
if (df$Face_Masks_Required_in_Public == 'No'){
new_mask <- c(new_mask, 0)
} else {
new_mask <- c(new_mask, 1)
}
}
warnings()
df <- read.csv("merged_test_data_with_sentiment.csv")
df <- na.omit(df)
new_mask <- as.numeric(0)
for (i in 1:nrow(df)){
if (df$Face_Masks_Required_in_Public[i] == 'No'){
new_mask <- c(new_mask, 0)
} else {
new_mask <- c(new_mask, 1)
}
}
df$new_mask <- new_mask
new_mask <- as.numeric(0)
new_mask
df <- read.csv("merged_test_data_with_sentiment.csv")
df <- na.omit(df)
new_mask <- as.numeric()
for (i in 1:nrow(df)){
if (df$Face_Masks_Required_in_Public[i] == 'No'){
new_mask <- c(new_mask, 0)
} else {
new_mask <- c(new_mask, 1)
}
}
df$new_mask <- new_mask
table(df$new_mask)
m1 <- lm(df$new_mask~df$Polarity)
plot(m1)
cor(df$new_mask, df$Polarity)
getwd()
dir()
df <- read.csv('all_tweets_with_sentiment.csv')
table(df$location)
table(df$location)
rm(list = ls())
df <- read.csv('all_tweets_with_sentiment.csv')
table(df$location)
which(df$location == 'Los Angeles, LA')
which(df$location == 'Los Angeles, CA')
df <- df[which(df$location == 'Los Angeles, CA')]
df <- df[which(df$location == 'Los Angeles, CA'), ]
dim(df)
table(df$location)
df <- read.csv('all_tweets_with_sentiment.csv')
table(df$location)
library(stringr)
ca_ind <- numeric(0)
library(stringr)
for (i in 1:nrow(df)){
if str_detect(df[i, 2], 'CA'){
ca_ind <- c(ca_ind, i)
}
}
ca_ind <- numeric(0)
library(stringr)
for (i in 1:nrow(df)) {
if str_detect(df[i, 2], 'CA') {
ca_ind <- c(ca_ind, i)
}
}
df[1, 2]
str_detect(df[1, 2], 'CA')
for (i in 1:nrow(df)) {
if str_detect(df[i, 2], 'CA') {
ca_ind <- c(ca_ind, i)
}
}
ca_ind <- numeric(0)
library(stringr)
for (i in 1:nrow(df)) {
if str_detect(df[i, 2], 'CA') {
ca_ind <- c(ca_ind, i)
}
}
library(stringr)
ca_ind <- numeric(0)
for (i in 1:nrow(df)) {
if str_detect(df[i, 2], 'CA') {
ca_ind <- c(ca_ind, i)
}
}
ca_ind <- numeric(0)
for (i in 1:nrow(df)) {
if (s)tr_detect(df[i, 2], 'CA')) {
ca_ind <- c(ca_ind, i)
}
}
library(stringr)
ca_ind <- numeric(0)
for (i in 1:nrow(df)) {
if (s)tr_detect(df[i, 2], 'CA')) {
ca_ind <- c(ca_ind, i)
}
}
ca_ind <- numeric(0)
for (i in 1:nrow(df)) {
if (str_detect(df[i, 2], 'CA')) {
ca_ind <- c(ca_ind, i)
}
}
len(ca_ind)
length(ca_ind)
dir()
df <- read.csv('all_tweets_with_sentiment.csv')
df <- read.csv('merged_data_with_sentiment.csv')
dim(df)
library(stringr)
ca_ind <- numeric(0)
for (i in 1:nrow(df)) {
if (str_detect(df[i, 2], 'CA')) {
ca_ind <- c(ca_ind, i)
}
}
length(df)
length(ca_ind)
length(which(df$location == 'Los Angeles, CA'), ])
length(which(df$location == 'Los Angeles, CA'))
